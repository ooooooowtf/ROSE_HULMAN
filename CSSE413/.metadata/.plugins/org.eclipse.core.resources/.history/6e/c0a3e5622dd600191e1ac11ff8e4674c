import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;

public class Sudoku {

	private static int boardSize = 0;
	private static int partitionSize = 0;

	public static int countU = 0;
	public static int[][] unknowns = null;

	public static void main(String[] args) {
		long start = System.currentTimeMillis();
		String filename = "sudoku9Hardest.txt";
		File inputFile = new File(filename);
		Scanner input = null;
		int[][] vals = null;

		int temp = 0;
		int count = 0;

		int ucount = 0;

		try {
			input = new Scanner(inputFile);
			temp = input.nextInt();
			boardSize = temp;
			partitionSize = (int) Math.sqrt(boardSize);
			System.out.println("Boardsize: " + temp + "x" + temp);
			vals = new int[boardSize][boardSize];
			unknowns = new int[boardSize * boardSize][2];

			System.out.println("Input:");
			int i = 0;
			int j = 0;

			while (input.hasNext()) {
				temp = input.nextInt();
				count++;
				System.out.printf("%3d", temp);
				vals[i][j] = temp;
				if (temp == 0) {
					unknowns[ucount][0] = i;
					unknowns[ucount][1] = j;
					ucount++;
				}
				j++;
				if (j == boardSize) {
					j = 0;
					i++;

					System.out.println();
				}
				if (i == boardSize) {
					countU = ucount;
					break;
				}
			}
			input.close();
		} catch (FileNotFoundException exception) {
			System.out.println("Input file not found: " + filename);
		}
		if (count != boardSize * boardSize)
			throw new RuntimeException("Incorrect number of inputs.");

		boolean solved = recS(vals);

		// Output
		if (!solved) {
			System.out.println("No solution found.");
			return;
		}
		System.out.println("\nOutput\n");
		for (int i = 0; i < boardSize; i++) {
			for (int j = 0; j < boardSize; j++) {
				System.out.printf("%3d", vals[i][j]);
			}
			System.out.println();
		}
		long end = System.currentTimeMillis();
		System.out.println(filename+ " uses "+(end-start)+"ms");

	}

	public static boolean recS(int[][] vals) {
		for(int i=0;i<countU;i++) {
			int xPos = unknowns[i][0];
			int yPos = unknowns[i][1];
			if(vals[xPos][yPos]==0) {
				for(int val=1;val<=boardSize;val++) {
					if(constrain(val, xPos, yPos, vals)) {
						add(val, xPos, yPos, vals);
						if(recS(vals)) {
							return true;
						}
						else {
							remove(xPos, yPos, vals);
						}
					}
				}
				return false;
			}
		}
		return true;
	}

	public static boolean constrain(int current, int xPos, int yPos, int[][] vals) {

		for (int i = 0; i < boardSize; i++) {
			if (vals[i][yPos] == current && i != xPos) {
				return false;
			}
		}

		for (int j = 0; j < boardSize; j++) {
			if (vals[xPos][j] == current && j != yPos) {
				return false;
			}
		}

		for (int k = 0; k < partitionSize; k++) {
			for (int m = 0; m < partitionSize; m++) {
				int xStart = (xPos / partitionSize) * partitionSize;
				int yStart = (yPos / partitionSize) * partitionSize;
				if (vals[xStart + k][yStart + m] == current && (xStart + k) != xPos && (yStart + m) != yPos) {
					return false;
				}
			}
		}
		return true;
	}

	public static void add(int value, int xPos, int yPos, int[][] vals) {
		vals[xPos][yPos] = value;
	}

	public static void remove(int xPos, int yPos, int[][] vals) {
		vals[xPos][yPos] = 0;
	}

}
