"""
The Python Capstone Project.

CSSE 120 - Introduction to Software Development.
Team members: Jonathan Holst, Ben Lewer, and Bill Yu.

The primary author of this module is: Jonathan Holst.
"""
# DONE: Put the names of ALL team members in the above where indicated.
#       Put YOUR NAME in the above where indicated.

import m0
import m2
import m3
import m4

import tkinter
from tkinter import ttk
import rosebot.standard_rosebot as rb
import time


def my_frame(root, dc):
    """
    Constructs and returns a   ttk.Frame   on the given root window.
    The frame contains all of this module's widgets.
    Does NOT   grid   the Frame, since the caller will do that.
    Also sets up callbacks for this module's widgets.

    The first argument is the  root  window (a tkinter.Tk object)
    onto which the   ttk.Frame  returned from this function
    will be placed.  The second argument is the shared DataContainer
    object that is CONSTRUCTED in m0 but USED in m1, m2, m3 and m4.

    Preconditions:
      :type root: tkinter.Tk
      :type dc:   m0.DataContainer
    """

    frame = ttk.Frame(root, padding=10)
    frame.grid()

    speed_label_box = LabelBox('Speed', frame)
    dc._speed_entrybox = speed_label_box.entrybox

    time_label_box = LabelBox('Time', frame)

    move_run_button = ttk.Button(frame, text='Move')
    move_run_button['command'] = lambda: move_for_time(dc)
    move_run_button.grid()


def move_for_time(dc):
    """
    Takes the data container, a speed between -100 and 100, and a time,
    and moves the robot straight at the given speed for the given time.
    """
    speed = get_speed()
    sleeptime = get_time()
    print(speed)
    print(sleeptime)

    dc.angrybot.motor_controller.drive_pwm(speed, speed)
    time.sleep(sleeptime)
    dc.angrybot.motor_controller.stop()


def get_speed(dc):
    """
    Returns the integer entered in the speed entry box.
    """
    s = dc._speed_entrybox.get()
    return int(s)


def get_time():
    """
    Returns the integer entered in the time entry box.
    """
    return int('This is something that I need help with')


class LabelBox(object):

    def __init__(self, label, frame, width=5):

        self.subframe = ttk.Frame(frame, padding=10)
        self.subframe.grid()
        self.label = ttk.Label(self.subframe, text=label)
        self.entrybox = ttk.Entry(self.subframe, width=width)
        self.label.grid(row=0, column=0, sticky='w')
        self.entrybox.grid(row=0, column=1, sticky='e')


# ----------------------------------------------------------------------
# If this module is running at the top level (as opposed to being
# imported by another module), then call the 'main' function.
# ----------------------------------------------------------------------
if __name__ == '__main__':
    m0.main()
