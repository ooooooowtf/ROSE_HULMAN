//
//                       _oo0oo_
//                      o8888888o
//                      88" . "88
//                      (| -_- |)
//                      0\  =  /0
//                    ___/`---'\___
//                  .' \\|     |// '.
//                 / \\|||  :  |||// \
//                / _||||| -:- |||||- \
//               |   | \\\  -  /// |   |
//               | \_|  ''\---/''  |_/ |
//               \  .-\__  '-'  ___/-. /
//             ___'. .'  /--.--\  `. .'___
//          ."" '<  `.___\_<|>_/___.' >' "".
//         | | :  `- \`.;`\ _ /`;.`/ - ` : | |
//         \  \ `_.   \_ __\ /__ _/   .-` /  /
//     =====`-.____`.___ \_____/___.-`___.-'=====
//                       `=---='
//
//
//     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
//

import java.util.Arrays;
import java.util.Comparator;

public class QuickSort<T extends Comparable<? super T>> {
	private int size;
	private T[] data;
	private static final int DEFAULT_CAPACITY = 5;
	private Class<T> type;
	private Comparator<T> comparator;
	
	private Comparator<T> DEFAULT_COMPARATOR= new Comparator<T>(){

		@Override
		public int compare(T arg0, T arg1) {
			// TODO Auto-generated method stub.
			return arg0.compareTo(arg1);
		}
		
	};
	
	public static void quickSort(T[] array, int low, int high){
		if (array == null || array.length == 0)
			return;
 
		if (low >= high)
			return;
		
		int middle = low + (high - low) / 2;
		int pivot = array[middle];
		int i= low+1;
		int j = high;
		while(true){
			while(array[i].compareTo(pivot)<0){
				i++;
			}
			while(array[j].compareTo(pivot)>0){
				j++;
			}
			if(i>=j){
				break;
			}
			swap(array,i,j);
		}
		swap(array,low,j);
	}

	private void swap(T[] array, int i, int j) {
		// TODO Auto-generated method stub.
		T temp = array[i];
		array[i]= array[j];
		array[j]= temp;	
	}
	
	public boolean insert(T value) {
		if(this.size+1==this.data.length){
			doubleArray();
		}
		data[size]=value;
		this.sort(data);
		return true;
	}

	private void doubleArray() {
		// TODO Auto-generated method stub.
		this.size= this.size*2;
	}

	public T deleteMin() {
		
		return null;
	}
	
	@Override
	public String toString(){
		return Arrays.toString(Arrays.copyOfRange(data,0,size+1));
	}
}
