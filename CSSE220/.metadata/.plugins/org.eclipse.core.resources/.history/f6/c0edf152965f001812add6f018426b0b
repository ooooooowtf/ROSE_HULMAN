package heap;

/**
 * 
 * A class containing the static IsHeap method.
 *
 * @author Nate Chenette and <<TODO: your name here >>>.
 */

public class MinIndexOfHeapRoot {

	/**
	 * Using the standard 1-indexed "heap structure" interpretation of the given
	 * input array of ints, returns the lowest index x such that the tree rooted
	 * at x forms a valid (min) binary heap.
	 * 
	 * @param arr,
	 *            the input array. Note that the 0th element is irrelevant to
	 *            the method, and the array will always be "filled" with data,
	 *            so that the heap-structure interpretation of the array will
	 *            have arr.length() - 1 elements in the corresponding tree.
	 * @return the smallest index
	 */
	public static int minIndexOfHeapRoot(int[] arr) {
		// TODO: Write this method!
		
		boolean[] array = new boolean[arr.length];
		for(int i=0;i<arr.length;i++){
			array[i]=true;
		}
		for (int i = 1; i < (arr.length / 2)+1; i++) {
			
			if (arr[2 * i] < arr[i] || arr[2 * i + 1] < arr[i]) {
				array[i]=false;
				
				int j=i;
				while(j>0){				
					j=(int) Math.floor(j/2);	
					array[j]=false;
				}
			}
			if((i*2+1)>arr.length-1){
				if(arr[2 * i] < arr[i]){
					array[i]=false;
				}
			}
		}
		
		for(int k=1;k<array.length;k++){
			if(array[k]==true){
				return k;
			}
		}
		
		return -1;
	}

}
