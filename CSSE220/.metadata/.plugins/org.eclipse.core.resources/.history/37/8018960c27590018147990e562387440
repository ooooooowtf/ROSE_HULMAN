import java.lang.reflect.Array;
import java.util.Comparator;

public class QuickSort<T extends Comparable<T>> {
	private int size;
	private T[] data;
	private static final int DEFAULT_CAPACITY = 5;
	private Class<T> type;
	private Comparator<T> comparator;
	
	private Comparator<T> DEFAULT_COMPARATOR= new Comparator<T>(){

		@Override
		public int compare(T arg0, T arg1) {
			// TODO Auto-generated method stub.
			return arg0.compareTo(arg1);
		}
		
	};
	
	public QuickSort(Class<T> type){
		this.type =type;
		this.data =(T[]) Array.newInstance(type, DEFAULT_CAPACITY);
		this.comparator = DEFAULT_COMPARATOR;
	}
	
	public void sort(T[] array){
		int low =0;
		int high = array.length-1;
		T pivot = array[low];
		int i= low+1;
		int j = high;
		while(true){
			while(array[i].compareTo(pivot)<0){
				i++;
			}
			while(array[j].compareTo(pivot)>0){
				j++;
			}
			if(i>=j){
				break;
			}
			swap(array,i,j);
		}
	}

	private void swap(T[] array, int i, int j) {
		// TODO Auto-generated method stub.
		T temp = array[i];
		array[i]= array[j];
		array[j]= temp;	
	}
}
