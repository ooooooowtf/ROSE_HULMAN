package evaluator;

import java.util.Stack;

public class PostfixEvaluator extends Evaluator {
	private Stack<Integer> output;
	
//	public static void main(String[] args) {
//		PostfixEvaluator a = new PostfixEvaluator();
//		int o = a.evaluate("15 3 -");
//		System.out.println(o);
//	}
	
	@Override
	public int evaluate(String postfix) throws ArithmeticException {
		// TODO Auto-generated method stub.

		this.output = new Stack<Integer>();
		for (int i = 0; i < postfix.length(); i++) {
			char current = postfix.charAt(i);
			if (Evaluator.isOperator(Character.toString(current))) {
				if (current == '+') {
					this.output.push(this.output.pop() + this.output.pop());
				} else if (current == '-') {
					this.output.push(-this.output.pop() + this.output.pop());
				} else if (current == '*') {
					this.output.push(this.output.pop() * this.output.pop());
				} else if (current == '/') {
					this.output.push(1 / this.output.pop() * this.output.pop());
				} else if (current == '^') {
					this.output.push(this.output.pop() ^ 2);
				}
			} else if (Character.isDigit(current)) {
				int a = (current-'0');
				if ((i != postfix.length() - 1 )&& Character.isDigit(postfix.charAt(i + 1))) {
					char next = postfix.charAt(i+1);
					int b = (next-'0');
					int c = (a * 10 + b);
					this.output.push(c);
					i++;
				} else {
					this.output.push(a);
				}
			}
		}

		if (!output.isEmpty())
			return output.pop();
		else
			return -1;
	}

}
