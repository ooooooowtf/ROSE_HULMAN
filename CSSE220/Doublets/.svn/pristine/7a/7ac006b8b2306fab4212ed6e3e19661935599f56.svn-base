import java.util.PriorityQueue;

public class PriorityQueueChainManager extends ChainManager {
	private PriorityQueue<Entry> items;
	private String end;

	public PriorityQueueChainManager(String end) {
		this.items = new PriorityQueue<>();
		this.end = end;
	}

	@Override
	public void add(Chain chain) {
		Entry entry = new Entry(chain);
		this.items.add(entry);
		this.updateMax(this.items.size());
	}

	@Override
	public Chain next() {
		if (items.isEmpty())
			return null;
		this.incrementNumNexts();
		Entry entry = items.poll();
		return entry.getChain();
	}

	@Override
	public boolean isEmpty() {
		return this.items.isEmpty();
	}

	public int compareCharDiff(String lastWord) {
		int diffCount = 0;
		if(lastWord.length() != end.length())
			return 0;
		for (int i = 0; i < lastWord.length(); i++) {
			if (end.charAt(i) != lastWord.charAt(i))
				diffCount++;// Makes the comparison: end vs. lastWord
		}
		return -1 * diffCount;// Difference is bad.
	}

	public class Entry implements Comparable<Entry> {
		private Chain self;

		public Entry(Chain chain) {
			this.self = chain;
		}
		
		public Chain getChain() {
			return this.self;
		}
		
		@Override
		public int compareTo(Entry o) {
			PriorityQueueChainManager manager = PriorityQueueChainManager.this;
			
			int lengthDiff = this.self.length() - o.getChain().length();
			// Difference in chain Length
			
			int charDiff = manager.compareCharDiff(o.getChain().getLast());
			// Difference in characters
			
			return charDiff + lengthDiff;
		}

		

	}

}
