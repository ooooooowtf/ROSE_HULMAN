package graphs;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

public class AdjacencyListGraph<T> extends Graph<T> {
	Map<T, Vertex> keyToVertex;

	private class Vertex {
		T key;
		List<Vertex> successors;
		List<Vertex> predecessors;

		Vertex(T key) {
			this.key = key;
			this.successors = new ArrayList<>();
			this.predecessors = new ArrayList<>();
		}
	}

	AdjacencyListGraph(Set<T> keys) {
		this.keyToVertex = new HashMap<>();

		for (T key : keys) {
			Vertex v = new Vertex(key);
			this.keyToVertex.put(key, v);
		}
	}

	@Override
	public int size() {
		return this.keyToVertex.size();
	}

	@Override
	public int numEdges() {
		int num = 0;
		for (Vertex ver : this.keyToVertex.values()) {
			num = num + ver.predecessors.size();
		}
		return num;
	}

	@Override
	public boolean addEdge(T from, T to) {
		if (!this.hasVertex(from) || !this.hasVertex(to)) {
			throw new NoSuchElementException();
		}

		Vertex start = this.keyToVertex.get(from);
		Vertex end = this.keyToVertex.get(to);
		if (start.successors.contains(end) || end.predecessors.contains(start)) {
			return false;
		}
		start.successors.add(end);
		end.predecessors.add(start);
		return true;
	}

	@Override
	public boolean hasVertex(T key) {
		for (T t : this.keyToVertex.keySet()) {
			if (t.equals(key)) {
				return true;
			}
		}
		return false;
	}

	@Override
	public boolean hasEdge(T from, T to) throws NoSuchElementException {
		if (!this.hasVertex(from) || !this.hasVertex(to)) {
			throw new NoSuchElementException();
		}
		Vertex start = this.keyToVertex.get(from);
		Vertex end = this.keyToVertex.get(to);
		if (start.successors.contains(end)) {
			return true;
		}
		return false;
	}

	@Override
	public boolean removeEdge(T from, T to) throws NoSuchElementException {
		if (!this.hasVertex(from) || !this.hasVertex(to)) {
			throw new NoSuchElementException();
		}
		
		Vertex start = this.keyToVertex.get(from);
		Vertex end = this.keyToVertex.get(to);
		
		if (!start.successors.contains(end)||!end.predecessors.contains(start)) {
			return false;
		}
		start.successors.remove(end);
		end.predecessors.remove(start);
		return true;
	}

	@Override
	public int outDegree(T key) {
		if (!this.hasVertex(key)) {
			throw new NoSuchElementException();
		}
		Vertex v = this.keyToVertex.get(key);
		return v.successors.size();
	}

	@Override
	public int inDegree(T key) {
		if (!this.hasVertex(key)) {
			throw new NoSuchElementException();
		}
		Vertex v = this.keyToVertex.get(key);
		return v.predecessors.size();
	}

	@Override
	public Set<T> keySet() {
		return this.keyToVertex.keySet();
	}

	@Override
	public Set<T> successorSet(T key) {
		if (!this.hasVertex(key)) {
			throw new NoSuchElementException();
		}
		Vertex v = this.keyToVertex.get(key);
		Set<T> s = new HashSet<>();
		for (Vertex ver : v.successors) {
			s.add(ver.key);
		}
		return s;
	}

	@Override
	public Set<T> predecessorSet(T key) {
		if (!this.hasVertex(key)) {
			throw new NoSuchElementException();
		}
		if (!this.hasVertex(key)) {
			throw new NoSuchElementException();
		}
		Vertex v = this.keyToVertex.get(key);
		Set<T> s = new HashSet<>();
		for (Vertex ver : v.predecessors) {
			s.add(ver.key);
		}
		return s;
	}

	@Override
	public Iterator<T> successorIterator(T key) {
		if (!this.hasVertex(key)) {
			throw new NoSuchElementException();
		}
		Vertex ver = this.keyToVertex.get(key);
		return new SuccessorIterator(ver.successors.iterator());
	}

	public class SuccessorIterator implements Iterator<T> {
		Iterator<Vertex> ite;

		public SuccessorIterator(Iterator<AdjacencyListGraph<T>.Vertex> iterator) {
			this.ite = iterator;
		}

		@Override
		public boolean hasNext() {
			return this.ite.hasNext();
		}

		@Override
		public T next() {
			return this.ite.next().key;
		}

	}

	@Override
	public Iterator<T> predecessorIterator(T key) {
		if (!this.hasVertex(key)) {
			throw new NoSuchElementException();
		}
		Vertex ver = this.keyToVertex.get(key);
		return new PredecessorIterator(ver.predecessors.iterator());
	}

	public class PredecessorIterator implements Iterator<T> {
		Iterator<Vertex> ite;

		public PredecessorIterator(Iterator<AdjacencyListGraph<T>.Vertex> iterator) {
			this.ite = iterator;
		}

		@Override
		public boolean hasNext() {
			return this.ite.hasNext();
		}

		@Override
		public T next() {
			return this.ite.next().key;
		}

	}

	@Override
	public Set<T> stronglyConnectedComponent(T key) {

		return null;
	}

	@Override
	public List<T> shortestPath(T startLabel, T endLabel) {
		// TODO Auto-generated method stub
		return null;
	}

}
