package pathstring;

public class BinarySearchTree {
	BinaryNode root;
	final BinaryNode NULL_NODE = new BinaryNode('\0');

	public BinarySearchTree() {
		root = NULL_NODE;
	}

	public String pathString(char item) {
		// TODO: write me. See the paper for details
		String toReturn = "";
		this.root.stringHelper(toReturn, item);
//		return inOrder(toReturn);
		return toReturn.toString();
	}

	// /////////////// BinaryNode
	public class BinaryNode {
		public char data;
		public BinaryNode left;
		public BinaryNode right;

		// The rest of the methods are used by the unit tests and for debugging
		public BinaryNode(char element) {
			this.data = element;
			this.left = NULL_NODE;
			this.right = NULL_NODE;
		}

		public String stringHelper(String toReturn, Character item) {
			// TODO Auto-generated method stub.
			if (this == NULL_NODE) {
				return toReturn;
			}
			if (this.data > item) {
				return this.data + this.left.stringHelper(toReturn, item);
			} else if (this.data < item) {
				return this.data + this.right.stringHelper(toReturn, item);
			} else {
				return toReturn + this.data;
			}
		}

		public BinaryNode(char element, BinaryNode left, BinaryNode right) {
			this(element);
			this.left = left;
			this.right = right;
		}

		public BinaryNode insert(char e) {
			if (this == NULL_NODE) {
				return new BinaryNode(e);
			} else if (e < data) {
				left = left.insert(e);
			} else if (e > data) {
				right = right.insert(e);
			} else {
				// do nothing
			}
			return this;
		}

		@Override
		public String toString() {
			if (this == NULL_NODE) {
				return "";
			}
			return left.toString() + this.data + right.toString();
		}
	}

	public String inOrder(String input) {
		char[] ou = new char[input.length()];
		StringBuilder output= new StringBuilder();
		for (int i = 0; i < input.length(); i++) {
			for (int j = i; i < input.length(); j++) {
				if (input.charAt(j) < input.charAt(i)) {
					ou[i]=input.charAt(j);
				}
			}
		}
		for(int i=0;i<ou.length;i++){
			output.append(ou[i]);
		}
		/*
		 * assert: elements from array[0] through array[firstUnsortedIndex] are
		 * sorted
		 */
		return output.toString();
	}
	
	public static <E extends Comparable<E>> void insertionSort(E[] array) {
		final int n = array.length;
		for (int nextIndex = 1; nextIndex < n; nextIndex++) {
			/*
			 * assert: elements from array[0] through array[nextIndex - 1] are
			 * sorted
			 */

			E next = array[nextIndex];

			/*
			 * Finds the location in the sorted part of the array at which to
			 * insert 'next'. Moves values up to make room as it searches.
			 */
			int insertIndex = nextIndex;
			while (insertIndex > 0
					&& array[insertIndex - 1].compareTo(next) > 0) {
				array[insertIndex] = array[insertIndex - 1];
				insertIndex--;
			}
			array[insertIndex] = next;

			/*
			 * assert: elements from array[0] through array[firstUnsortedIndex]
			 * are sorted
			 */
		}
	}


	// The next methods are used by the unit tests
	public void insert(char e) {
		root = root.insert(e);
	}

	@Override
	public String toString() {
		return root.toString();
	}
}